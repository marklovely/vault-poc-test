name: Test Vault Integration

on:
  push:
    branches: [main]
  workflow_dispatch:  # Allows manual triggering

permissions:
  id-token: write  # Required for OIDC
  contents: read

jobs:
  test-vault:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get GitHub OIDC Token
        id: get-token
        run: |
          echo "Getting GitHub OIDC token..."
          GITHUB_TOKEN=$(curl -sS -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=https://github.com/${{ github.repository_owner }}" | \
            jq -r '.value')

          echo "Token received (first 20 chars): ${GITHUB_TOKEN:0:20}..."
          echo "github-token=$GITHUB_TOKEN" >> $GITHUB_OUTPUT

      - name: Install Vault CLI
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install vault

      - name: Debug JWT Token Claims
        run: |
          echo "Repository: ${{ github.repository }}"
          echo "Repository Owner: ${{ github.repository_owner }}"
          echo "Actor: ${{ github.actor }}"
          echo "Ref: ${{ github.ref }}"
          echo "SHA: ${{ github.sha }}"

      - name: Authenticate with Vault
        env:
          VAULT_ADDR: "https://aa02-87-75-171-199.ngrok-free.app"  # Replace with your actual ngrok URL
        run: |
          echo "Attempting to authenticate with Vault..."
          echo "Vault Address: $VAULT_ADDR"

          # Test Vault connectivity first
          vault status || echo "Vault status check failed"

          # Attempt JWT authentication
          VAULT_TOKEN=$(vault write -field=token auth/jwt/login \
            role=github-actions \
            jwt=${{ steps.get-token.outputs.github-token }}) || {
            echo "JWT authentication failed"
            exit 1
          }

          echo "Authentication successful!"
          echo "VAULT_TOKEN=$VAULT_TOKEN" >> $GITHUB_ENV

      - name: Read Secrets from Vault
        env:
          VAULT_ADDR: "https://aa02-87-75-171-199.ngrok-free.app"  # Replace with your actual ngrok URL
        run: |
          echo "Reading secrets from Vault..."

          # List available secrets
          echo "Available secrets:"
          vault kv list secret/github/|| echo "Failed to list secrets"

          # Read specific secrets
          echo "Database password:"
          vault kv get -field=password secret/github/database || echo "Failed to get database password"

          echo "API key:"
          vault kv get -field=key secret/github/api || echo "Failed to get API key"

      - name: Use Secrets in Application
        env:
          VAULT_ADDR: "https://aa02-87-75-171-199.ngrok-free.app"  # Replace with your actual ngrok URL
        run: |
          # Example of using secrets in a real application
          DB_PASSWORD=$(vault kv get -field=password secret/github/database)
          API_KEY=$(vault kv get -field=key secret/github/api)

          echo "Successfully retrieved secrets for application use"
          echo "Database password length: ${#DB_PASSWORD}"
          echo "API key length: ${#API_KEY}"

          # In real usage, you'd pass these to your application
          # export DATABASE_PASSWORD="$DB_PASSWORD"
          # export API_KEY="$API_KEY"
          # ./your-application
      - name: Test Python Application
        env:
          VAULT_ADDR: "https://aa02-87-75-171-199.ngrok-free.app"
        run: |
          # Install Python Vault client
          pip install hvac

          # Run the Python app
          python test-app.py

      - name: Revoke Vault Token
        if: always()
        env:
          VAULT_ADDR: "https://aa02-87-75-171-199.ngrok-free.app"
        run: |
          if [ ! -z "$VAULT_TOKEN" ]; then
            echo "Revoking Vault token..."
            vault token revoke -self || echo "Token revocation failed"
            # Verify token is revoked by trying to use it
            echo "Verifying token is revoked..."
            if vault token lookup -self 2>/dev/null; then
              echo "WARNING: Token still active!"
            else
              echo "Confirmed: Token successfully revoked"
            fi
          else
            echo "No token to revoke"
          fi